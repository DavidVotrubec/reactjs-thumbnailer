{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["emptyObject","App","state","selectedVideo","handleFileChange","event","target","file","value","name","files","console","log","type","size","_this","setState","upload","alert","react_default","a","createElement","Fragment","Header","attached","inverted","Container","Segment","placeholder","icon","Icon","Input","onChange","this","Table","celled","Body","Row","Cell","lastModifiedDate","toLocaleDateString","Button","primary","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAKMA,UAAc,IAuFLC,6MAnFbC,MAAQ,CACNC,cAAeH,KAGjBI,iBAAmB,SAACC,GAClB,IAAMC,EAASD,EAAMC,OAIfC,GAHQD,EAAOE,MACRF,EAAOG,KAEPJ,EAAMC,OAAOI,MAAM,IAEhCC,QAAQC,IAAI,aAAeL,EAAKE,MAChCE,QAAQC,IAAI,SAAWL,EAAKM,MAC5BF,QAAQC,IAAI,SAAWL,EAAKO,KAAO,UAEnCC,EAAKC,SAAS,CACZb,cAAeI,OAInBU,OAAS,WACPC,MAAM,6GAIN,OAEEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,SAAS,MAAMC,UAAU,EAAMX,KAAK,SAA5C,qBACAK,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAEEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASC,aAAW,GAClBT,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQM,MAAI,GACVV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMrB,KAtCD,uBAqCP,qEAIEU,EAAAC,EAAAC,cAAA,WAJF,6DAQAF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOH,YAAY,kBAAkBf,KAAK,OAAOmB,SAAUC,KAAK7B,iBAAkBK,KAAK,mBAIxFwB,KAAK/B,MAAMC,eAAiBH,GAC7BmB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KAEER,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,QAAM,GACXhB,EAAAC,EAAAC,cAACa,EAAA,EAAME,KAAP,KACEjB,EAAAC,EAAAC,cAACa,EAAA,EAAMG,IAAP,KACElB,EAAAC,EAAAC,cAACa,EAAA,EAAMI,KAAP,iBAGAnB,EAAAC,EAAAC,cAACa,EAAA,EAAMI,KAAP,KACIL,KAAK/B,MAAMC,cAAuBM,OAGxCU,EAAAC,EAAAC,cAACa,EAAA,EAAMG,IAAP,KACElB,EAAAC,EAAAC,cAACa,EAAA,EAAMI,KAAP,iBACAnB,EAAAC,EAAAC,cAACa,EAAA,EAAMI,KAAP,KACEL,KAAK/B,MAAMC,cAAuBW,KADpC,WAIFK,EAAAC,EAAAC,cAACa,EAAA,EAAMG,IAAP,KACElB,EAAAC,EAAAC,cAACa,EAAA,EAAMI,KAAP,sBACAnB,EAAAC,EAAAC,cAACa,EAAA,EAAMI,KAAP,KACEL,KAAK/B,MAAMC,cAAsBoC,iBAAiBC,yBAM1DrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQC,SAAO,EAACC,QAASV,KAAKhB,QAA9B,0BA1EM2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1f0c517f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Header, Icon, Segment, Table, Input, SemanticICONS, Button } from 'semantic-ui-react'\nimport './App.css';\n\nconst iconName = (('video file outline') as SemanticICONS);\nconst emptyObject = {};\n\nclass App extends Component {\n  \n  state = {\n    selectedVideo: emptyObject\n  }\n\n  handleFileChange = (event: any) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    const file = event.target.files[0];\n\n    console.log(\"Filename: \" + file.name);\n    console.log(\"Type: \" + file.type);\n    console.log(\"Size: \" + file.size + \" bytes\");\n\n    this.setState({\n      selectedVideo: file\n    });\n  }\n\n  upload = () => {\n    alert('todo: implement upload to AWS S3');\n  }\n\n  render() {\n    return (\n\n      <React.Fragment>\n        <Header attached=\"top\" inverted={true} size=\"large\">Video Thumbnailer</Header>\n        <Container>\n\n          <Segment placeholder>\n            <Header icon>\n              <Icon name={iconName} />\n\n              Upload short video to trigger thumbnails generation in AWS Lambda.\n              <br/>\n              When the thumbnails are generated, they will appear here.\n            </Header>\n\n            <Input placeholder='Select video...' type=\"file\" onChange={this.handleFileChange} name=\"selectedVideo\"/>\n          </Segment>\n\n          {/* Display file info before uploading */}\n          {this.state.selectedVideo != emptyObject && \n          <Segment>\n\n            <Table celled>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Cell>\n                    Filename\n                  </Table.Cell>\n                  <Table.Cell>\n                    {(this.state.selectedVideo as File).name}\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>Filesize</Table.Cell>\n                  <Table.Cell>\n                  {(this.state.selectedVideo as File).size} bytes\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>Last modified</Table.Cell>\n                  <Table.Cell>\n                  {(this.state.selectedVideo as any).lastModifiedDate.toLocaleDateString()}\n                  </Table.Cell>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n\n            <Button primary onClick={this.upload}>Upload video</Button>\n\n          </Segment>}\n          \n          \n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}